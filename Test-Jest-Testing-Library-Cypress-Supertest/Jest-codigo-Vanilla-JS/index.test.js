/**
 * Requerir la funci칩n que queremos probar: isPalindrome = require('./index.js')
 *
 * La test() funci칩n la proporciona Jest y dentro de ella pondremos el c칩digo
 * que queremos que Jest ejecute.
 *
 * test() toma dos par치metros.
 * El primero es una descripci칩n de la prueba, que es un nombre distintivo que se mostrar치
 * en nuestra consola cuando se ejecute la prueba.
 *
 * El segundo par치metro es una devoluci칩n de llamada,
 * que contiene el c칩digo de prueba real.
 *
 * Dentro de esta devoluci칩n de llamada estamos llamando a la expect() funci칩n
 * (tambi칠n proporcionada por Jest).
 * expect() toma nuestra funci칩n como par치metro, que a su vez recibe un par치metro que inventamos.
 *
 * Por 칰ltimo, encadenamos la .toBe() funci칩n (proporcionada tambi칠n por Jest)
 * y como par치metro le pasamos el valor que esperamos isPalindrome() devolver para cada caso.
 * ("neuquen" es un pal칤ndromo, por lo que nuestra funci칩n deber칤a devolver true,
 * y "bariloche" no lo es, por lo que deber칤a devolver false).
 *
 * Jest es f치cil de configurarlo.
 * La autoexplicativa que es su sintaxis. 游녧
 */

const { isPalindrome, twoSum } = require("./index.js");

/*
test("neuquen is palindrom", () => {
  expect(isPalindrome("neuquen")).toBe(true);
});

test("bariloche is not palindrom", () => {
  expect(isPalindrome("bariloche")).toBe(false);
});
*/

/**
 * La funci칩n toma dos par치metros, una matriz de n칰meros y un n칰mero de valor objetivo.
 * Lo que hace es identificar si hay dos n칰meros en la matriz que suman el valor del
 * segundo par치metro. Si los dos valores existen en la matriz, los devuelve en una matriz
 * y, si no, devuelve falso.
 */

/*
test("[2,7,11,15] and 9 returns [2, 7]", () => {
  expect(twoSum([2, 7, 11, 15], 9)).toEqual([2, 7]);
});

test("[3,2,4] and 6 returns [2, 4]", () => {
  expect(twoSum([3, 2, 4], 6)).toEqual([2, 4]);
});

test("[3,2,4] and 10 returns false", () => {
  expect(twoSum([3, 2, 4], 10)).toBe(false);
});
*/

/**
 * Por ejemplo, .toBe()se usa para evaluar primitivas como cadenas, n칰meros o booleanos.
 * toEqual()se usa para evaluar objetos (que cubre casi todo lo dem치s en Javascript).
 *
 * Comparar el valor devuelto con un n칰mero se podr칤a usar, .toBeGreaterThan() etc.
 * toBeGreaterThanOrEqual()
 */

/**
 * Jest nos proporciona una describe() funci칩n que podemos usar para agrupar las pruebas
 * y mostrar los resultados de una manera m치s esquem치tica.
 *
 * El primer par치metro es la descripci칩n que queremos mostrar para el grupo de pruebas dado,
 * y el segundo es una devoluci칩n de llamada que contiene nuestras pruebas.
 */

describe("isPalindrome function", () => {
  test("neuquen is palindrom", () => {
    expect(isPalindrome("neuquen")).toBe(true);
  });

  test("bariloche is not palindrom", () => {
    expect(isPalindrome("bariloche")).toBe(false);
  });
});

describe("twoSum function", () => {
  test("[2,7,11,15] and 9 returns [2, 7]", () => {
    expect(twoSum([2, 7, 11, 15], 9)).toEqual([2, 7]);
  });

  test("[3,2,4] and 6 returns [2, 4]", () => {
    expect(twoSum([3, 2, 4], 6)).toEqual([2, 4]);
  });

  test("[3,2,4] and 10 returns false", () => {
    expect(twoSum([3, 2, 4], 10)).toBe(false);
  });
});
